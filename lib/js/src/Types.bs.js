// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var S$RescriptSchema = require("rescript-schema/lib/js/src/S.bs.js");

var Connective = {};

var Operator = {};

var Comparison = {
  Operator: Operator
};

var schema = S$RescriptSchema.recursive(function (innerSchema) {
      return S$RescriptSchema.union([
                  S$RescriptSchema.object(function (s) {
                        s.tag("type", "or");
                        return {
                                TAG: "Connective",
                                _0: {
                                  operator: "or",
                                  conditions: s.f("value", S$RescriptSchema.array(innerSchema))
                                }
                              };
                      }),
                  S$RescriptSchema.object(function (s) {
                        s.tag("type", "and");
                        return {
                                TAG: "Connective",
                                _0: {
                                  operator: "and",
                                  conditions: s.f("value", S$RescriptSchema.array(innerSchema))
                                }
                              };
                      }),
                  S$RescriptSchema.object(function (s) {
                        s.tag("type", "equal");
                        return {
                                TAG: "Comparison",
                                _0: {
                                  operator: "equal",
                                  values: s.f("value", S$RescriptSchema.tuple2(S$RescriptSchema.string, S$RescriptSchema.string))
                                }
                              };
                      }),
                  S$RescriptSchema.object(function (s) {
                        s.tag("type", "greater-than");
                        return {
                                TAG: "Comparison",
                                _0: {
                                  operator: "greater-than",
                                  values: s.f("value", S$RescriptSchema.tuple2(S$RescriptSchema.string, S$RescriptSchema.string))
                                }
                              };
                      })
                ]);
    });

var Condition = {
  Connective: Connective,
  Comparison: Comparison,
  schema: schema
};

var bodySchema = S$RescriptSchema.$$Object.factory(function (s) {
      return {
              condition: s.f("condition", schema)
            };
    });

exports.Condition = Condition;
exports.bodySchema = bodySchema;
/* schema Not a pure module */
